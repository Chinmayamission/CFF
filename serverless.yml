# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

# AWS_PROFILE=ashwin-cff-lambda
# sls invoke local --function sheets --stage beta
# sls deploy --stage beta --cff_version 3.10.11

# sls deploy --stage prod
# Run it once:
# sls invoke --function sheets --stage prod

service: ccmt-cff-backend-js # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  profile: ashwin-cff-lambda

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

  iamRoleStatements: []

  environment:
    mongoConnStr: ${self:custom.mongoConnStr.${opt:stage}}
    mongoCollectionName: ${self:custom.mongoCollectionName.${opt:stage}}
    googleKey: ${self:custom.googleKey.${opt:stage}}
    mapsApiKey: ${self:custom.mapsApiKey.${opt:stage}}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  sheets:
    handler: scripts/backend/handler.hello
    timeout: 30
    events:
      - schedule: rate(1 hour)
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "ssm:GetParameter"
        Resource:
          - "arn:aws:ssm:*:*:parameter/${self:custom.mongoConnStr.${opt:stage}}"
          - "arn:aws:ssm:*:*:parameter/${self:custom.googleKey.${opt:stage}}"
          - "arn:aws:ssm:*:*:parameter/${self:custom.mapsApiKey.${opt:stage}}"
  edgeHandler:
    handler: scripts/backend/edgeHandler.hello
    lambdaAtEdge:
      distribution: 'ApiDistribution'
      eventType: 'origin-request'

custom:
  webpack:
    webpackConfig: webpack.backend.js
  mongoConnStr:
    dev: none
    beta: CFF_COSMOS_CONN_STR_WRITE_BETA
    prod: CFF_COSMOS_CONN_STR_WRITE_PROD
  googleKey:
    dev: none
    beta: CFF_GOOGLE_SHEETS_KEY_BETA
    prod: CFF_GOOGLE_SHEETS_KEY_PROD  
  mapsApiKey:
    dev: none
    beta: CFF_MAPS_API_KEY_BETA
    prod: CFF_MAPS_API_KEY_PROD
  mongoCollectionName:
    dev: cff_dev
    beta: cff_beta
    prod: cff_prod
  bucketName:
    dev: cff_dev
    beta: cff_beta
    prod: cff_prod
  localBuildPath:
    dev: none
    beta: scripts/beta
    prod: scripts/prod
  version: ${opt:cff_version}
  s3Sync:
    bucketName: ${self:custom.bucketName.${opt:stage}}
    bucketPrefix: "${self:custom.cff_version}/"
    localDir: 
  domainName:
    dev: none
    beta: forms.beta.chinmayamission.com
    prod: forms.chinmayamission.com

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-iam-roles-per-function
  - '@silvermine/serverless-plugin-cloudfront-lambda-edge'
  - serverless-api-cloudfront
  - serverless-s3-sync

resources:
  Resources:
    AssetsBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:custom.bucketName.${opt:stage}}
    ApiDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
          - Id: myS3Origin
            DomainName: ${self:custom.bucketName.${opt:stage}}.s3.amazonaws.com
            S3OriginConfig:
              OriginAccessIdentity: origin-access-identity/cloudfront/E127EXAMPLE51Z
          - Id: myCustomOrigin
            DomainName: www.example.com
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
          Enabled: 'true'
          Comment: Some comment
          DefaultRootObject: index.html
          Logging:
            IncludeCookies: 'true'
            Bucket: mylogs.s3.amazonaws.com
            Prefix: myprefix
          Aliases:
          - ${self:custom.domainName.${opt:stage}}
          DefaultCacheBehavior:
            TargetOriginId: myS3Origin
            ForwardedValues:
              QueryString: 'false'
              Cookies:
                Forward: all
            TrustedSigners:
            - 1234567890EX
            - 1234567891EX
            ViewerProtocolPolicy: allow-all
            MinTTL: '100'
            SmoothStreaming: 'true'
          CacheBehaviors:
          - AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
            TargetOriginId: myS3Origin
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: none
            # TrustedSigners:
            # - 1234567890EX
            # - 1234567891EX
            ViewerProtocolPolicy: allow-all
            MinTTL: '50'
            PathPattern: images1/*.jpg
          - AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
            TargetOriginId: myCustomOrigin
            ForwardedValues:
              QueryString: 'true'
              Cookies:
                Forward: none
            # TrustedSigners:
            # - 1234567890EX
            # - 1234567891EX
            ViewerProtocolPolicy: allow-all
            MinTTL: '50'
            PathPattern: images2/*.jpg
          CustomErrorResponses:
          - ErrorCode: '404'
            ResponsePagePath: "/error-pages/404.html"
            ResponseCode: '200'
            ErrorCachingMinTTL: '30'
          PriceClass: PriceClass_All
          ViewerCertificate:
            CloudFrontDefaultCertificate: 'true'