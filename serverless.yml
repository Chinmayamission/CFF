# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

# AWS_PROFILE=default
# sls invoke local --function sheets --stage beta
# sls deploy --stage beta

# sls deploy --stage prod
# Run it once:
# sls invoke --function sheets --stage prod

service: ccmt-cff-backend-js # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ssm:GetParameter"
      Resource:
        - "arn:aws:ssm:*:*:parameter/${self:custom.mongoConnStr.${opt:stage}}"
        - "arn:aws:ssm:*:*:parameter/${self:custom.googleKey.${opt:stage}}"
        - "arn:aws:ssm:*:*:parameter/${self:custom.mapsApiKey.${opt:stage}}"

#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

  environment:
    mongoConnStr: ${self:custom.mongoConnStr.${opt:stage}}
    mongoCollectionName: ${self:custom.mongoCollectionName.${opt:stage}}
    googleKey: ${self:custom.googleKey.${opt:stage}}
    mapsApiKey: ${self:custom.mapsApiKey.${opt:stage}}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  sheets:
    handler: scripts/backend/handler.hello
    timeout: 60
    events:
      - schedule: rate(1 hour)

custom:
  webpack:
    webpackConfig: webpack.backend.js
  mongoConnStr:
    dev: none
    beta: CFF_ATLAS_CONN_STR_WRITE_BETA
    prod: CFF_COSMOS_CONN_STR_WRITE_PROD
  googleKey:
    dev: none
    beta: CFF_GOOGLE_SHEETS_KEY_BETA
    prod: CFF_GOOGLE_SHEETS_KEY_PROD  
  mapsApiKey:
    dev: none
    beta: CFF_MAPS_API_KEY_BETA
    prod: CFF_MAPS_API_KEY_PROD
  mongoCollectionName:
    dev: cff_dev
    beta: cff_beta
    prod: cff_prod  

plugins:
  - serverless-webpack
  - serverless-offline
  # - serverless-plugin-typescript

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
